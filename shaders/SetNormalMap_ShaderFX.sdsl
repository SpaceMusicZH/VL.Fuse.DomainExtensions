shader SetNormalMap_ShaderFX : ShadingBase, ShaderBaseStream, PositionStream4, NormalBase, NormalStream, TransformationBase, Transformation, Texturing
{
    rgroup PerMaterial
    {
        stage Texture2D<float4> NormalMap;
        stage SamplerState NormalSampler;
    }

    cbuffer PerMaterial
    {
        stage float strength = 1.0;
    }

    compose ComputeFloat2 Provider;

    stage override float4 Shading() 
    {
        return StrideShadingWorldNormal(streams.PositionWS, streams.normalWS);
    }

    stage float4 StrideShadingWorldNormal(float3 worldPos, float3 normal)
    {
        float2 uv = Provider.Compute();
        float3 bumpsNormal = NormalMap.Sample(NormalSampler, uv).xyz;

        float3 p_dx = ddx(worldPos);
        float3 p_dy = ddy(worldPos);

        float2 tc_dx = ddx(uv);
        float2 tc_dy = ddy(uv);

        float3 t = normalize( tc_dy.y * p_dx - tc_dx.y * p_dy );
        float3 b = normalize( tc_dy.x * p_dx - tc_dx.x * p_dy ); 

        float3 n = normalize(normal);
        float3 x = cross(n, t);
        t = cross(x, n);
        t = normalize(t);

        x = cross(b, n);
		b = cross(n, x);
		b = normalize(b);
		
		bumpsNormal = bumpsNormal * 2.0 - 1.0;

        streams.normalWS = normalize(streams.normalWS + (bumpsNormal.x * t + bumpsNormal.y * b) * strength);
        streams.meshNormalWS = streams.normalWS;

        return base.Shading();
    }
};